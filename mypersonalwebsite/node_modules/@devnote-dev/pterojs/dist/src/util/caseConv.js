"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function camelCase(str) {
    let res = '';
    let next = false;
    str.split('').forEach(c => {
        if (next) {
            next = false;
            res += c.toUpperCase();
        }
        else if (c === '_') {
            next = true;
        }
        else {
            res += c;
        }
    });
    return res;
}
function toCamelCase(obj, options = {}) {
    if (typeof obj !== 'object')
        return obj;
    const parsed = {};
    if (Array.isArray(obj)) {
        return obj.map(i => toCamelCase(i));
    }
    for (let [k, v] of Object.entries(obj)) {
        if (options.ignore?.includes(k))
            continue;
        if (options.map?.[k])
            k = options.map[k];
        if (options.cast?.[k]) {
            try {
                const cls = options.cast[k];
                // @ts-ignore
                v = new cls(v);
            }
            catch {
                v = String(v);
            }
        }
        if (Array.isArray(v)) {
            v = v.map(i => toCamelCase(i));
        }
        else if (typeof v === 'object' && !!v) {
            v = toCamelCase(v);
        }
        parsed[camelCase(k)] = v;
    }
    return parsed;
}
function snakeCase(str) {
    let res = '';
    const isUpper = (c) => 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.split('').includes(c);
    str.split('').forEach(c => {
        if (isUpper(c))
            res += '_';
        res += c.toLowerCase();
    });
    return res;
}
function toSnakeCase(obj, options = {}) {
    if (typeof obj !== 'object')
        return obj;
    const parsed = {};
    if (Array.isArray(obj)) {
        return obj.map(i => toSnakeCase(i));
    }
    for (let [k, v] of Object.entries(obj)) {
        if (options.ignore?.includes(k))
            continue;
        if (options.map?.[k])
            k = options.map[k];
        if (options.cast?.[k]) {
            try {
                const cls = options.cast[k];
                // @ts-ignore
                v = new cls(v);
            }
            catch {
                v = String(v);
            }
        }
        if (Array.isArray(v)) {
            v = v.map(i => toSnakeCase(i));
        }
        else if (typeof v === 'object' && !!v) {
            v = toSnakeCase(v);
        }
        parsed[snakeCase(k)] = v;
    }
    return parsed;
}
exports.default = {
    toCamelCase,
    toSnakeCase
};
