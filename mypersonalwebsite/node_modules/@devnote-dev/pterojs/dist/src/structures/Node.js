"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Node = void 0;
const caseConv_1 = require("../util/caseConv");
class Node {
    constructor(client, data) {
        this.client = client;
        this.id = data.id;
        this.uuid = data.uuid;
        this.createdAt = new Date(data.created_at);
        this._patch(data);
    }
    _patch(data) {
        if ('public' in data)
            this.public = data.public;
        if ('name' in data)
            this.name = data.name;
        if ('description' in data)
            this.description = data.description || undefined;
        if ('location_id' in data)
            this.locationId = data.location_id;
        if ('fqdn' in data)
            this.fqdn = data.fqdn;
        if ('scheme' in data)
            this.scheme = data.scheme;
        if ('behind_proxy' in data)
            this.behindProxy = data.behind_proxy;
        if ('maintenance_mode' in data)
            this.maintenance = data.maintenance_mode;
        if ('memory' in data)
            this.memory = data.memory;
        if ('memory_overallocate' in data)
            this.overallocatedMemory = data.memory_overallocate;
        if ('disk' in data)
            this.disk = data.disk;
        if ('disk_overallocate' in data)
            this.overallocatedDisk = data.disk_overallocate;
        if ('upload_size' in data)
            this.uploadSize = data.upload_size;
        if (!this.daemon)
            this.daemon = {};
        if ('daemon_listen' in data)
            this.daemon.listening = data.daemon_listen;
        if ('daemon_sftp' in data)
            this.daemon.sftp = data.daemon_sftp;
        if ('daemon_base' in data)
            this.daemon.base = data.daemon_base;
    }
    /**
     * Returns a formatted URL to the node in the admin panel.
     * @returns The formatted URL.
     */
    get adminURL() {
        return `${this.client.domain}/admin/nodes/view/${this.id}`;
    }
    /**
     * Fetches the configuration of the node.
     * @returns The node configuration.
     */
    async getConfig() {
        return await this.client.nodes.getConfig(this.id);
    }
    /**
     * Updates the node with the specified options.
     * @param options Update node options.
     * @see {@link CreateNodeOptions UpdateNodeOptions}.
     * @returns The updated instance.
     */
    async update(options) {
        const data = await this.client.nodes.update(this.id, options);
        this._patch(data.toJSON());
        return this;
    }
    /**
     * Converts the node into a JSON object, relative to the API
     * response object.
     * @returns The JSON object.
     */
    toJSON() {
        return caseConv_1.default.toSnakeCase(this, {
            ignore: ['client', 'location', 'servers'],
            map: {
                maintainance: 'maintenance_mode',
                overallocatedMemory: 'memory_overallocate',
                overallocatedDisk: 'disk_overallocate'
            }
        });
    }
    /** @returns The string representation of the node. */
    toString() {
        return this.name;
    }
}
exports.Node = Node;
