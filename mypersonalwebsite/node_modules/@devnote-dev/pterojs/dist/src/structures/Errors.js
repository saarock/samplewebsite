"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebSocketError = exports.ValidationError = exports.RequestError = exports.PteroAPIError = void 0;
/** Thown when an API error is received (usually 4xx errors). */
class PteroAPIError extends Error {
    constructor(data) {
        const fmt = data.errors.map(e => `- ${e.status}: ${e.detail || 'No details provided'}`).join('\n');
        super('\n' + fmt);
        this.codes = data.errors.map(e => e.code);
        this.meta = data.errors.map(e => e.meta).filter(Boolean);
    }
}
exports.PteroAPIError = PteroAPIError;
/** Thrown when a non-API error is encountered. */
class RequestError extends Error {
}
exports.RequestError = RequestError;
/** Thown when a validation a method, object or other fails to be validated. */
class ValidationError extends Error {
    constructor(...args) {
        switch (args.length) {
            case 3:
                super(`Failed to validate ${args[0]}: ` +
                    `expected ${args[1]}; got ${args[2]}`);
                break;
            case 2: break; // not sure what to do with this yet.
            case 1:
                super(`Validation: ${args[0]}`);
                break;
            default:
                super('Validation check failed.');
                break;
        }
    }
}
exports.ValidationError = ValidationError;
/** Thrown when a websocket error is encountered. */
class WebSocketError extends Error {
}
exports.WebSocketError = WebSocketError;
