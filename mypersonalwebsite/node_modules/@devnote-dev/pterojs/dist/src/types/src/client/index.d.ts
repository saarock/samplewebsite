import type { Shard } from './ws/Shard';
import { Account } from '../structures/User';
import { ClientServerManager } from './ClientServerManager';
import { RequestManager } from '../http/RequestManager';
import { ScheduleManager } from './ScheduleManager';
import { WebSocketManager } from './ws/WebSocketManager';
import { OptionSpec } from '../common';
import { PermissionDescriptor } from '../common/client';
/**
 * The base class for the Pterodactyl client API.
 * This operates using a Pterodactyl client API key which can be found
 * at <your.domain.name/account/api>.
 *
 * **Warning:** Keep your API key private at all times. Exposing this can lead
 * to your accond and servers being corrupted, exposed and/or deleted.
 */
export declare class PteroClient {
    /**
     * The domain for your Pterodactyl panel. This should be the main URL only
     * (not "/api"). Any additional paths will count as the API path.
     */
    domain: string;
    /**
     * The API key for your Pterodactyl account. This should be kept private at
     * all times.
     */
    auth: string;
    options: Record<string, OptionSpec>;
    /**
     * The account class for controlling your panel account, including the email,
     * password, API keys and SSH keys.
     */
    account: Account;
    schedules: ScheduleManager;
    servers: ClientServerManager;
    requests: RequestManager;
    ws: WebSocketManager;
    constructor(domain: string, auth: string, options?: Record<string, OptionSpec>);
    get ping(): number;
    /**
     * Fetches the raw permissions from the API.
     * @see {@link PermissionDescriptor}.
     * @returns The raw permission descriptors.
     */
    fetchPermissions(): Promise<Record<string, PermissionDescriptor>>;
    /** Performs preload requests to Pterodactyl. */
    connect(): Promise<void>;
    /**
     * Creates a websocket shard for a specified server.
     * @param id The identifier of the server.
     * @returns The server websocket shard.
     */
    addSocketServer(id: string): Shard;
    /**
     * Creates websocket shards for the specified servers.
     * @param ids The identifiers of the servers.
     * @returns An array of the server websocket shards.
     */
    addSocketServer(...ids: string[]): Shard[];
    /**
     * Removes a server from websocket connections.
     * @param id The identifier of the server.
     * @returns Whether the shard was removed.
     */
    removeSocketServer(id: string): boolean;
    /** Closes any existing websocket connections. */
    disconnect(): void;
}
