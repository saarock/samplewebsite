import type { PteroApp } from '.';
import { BaseManager } from '../structures/BaseManager';
import { Dict } from '../structures/Dict';
import { FetchOptions, Filter, Include, NodeLocation, PaginationMeta, Resolvable, Sort } from '../common';
export declare class NodeLocationManager extends BaseManager {
    client: PteroApp;
    cache: Dict<number, NodeLocation>;
    meta: PaginationMeta;
    /**
     * Allowed filter arguments for locations:
     * * short
     * * long
     */
    get FILTERS(): readonly string[];
    /**
     * Allowed include arguments for locations:
     * * nodes
     * * servers
     */
    get INCLUDES(): readonly string[];
    /** Allowed sort arguments for locations (none). */
    get SORTS(): readonly never[];
    constructor(client: PteroApp);
    /**
     * Transforms the raw location object(s) into typed objects.
     * @param data The resolvable location object(s).
     * @returns The resolved location object(s).
     */
    _patch(data: any): any;
    /**
     * Resolves a location from an object. This can be:
     * * a string
     * * a number
     * * an object
     *
     * @param obj The object to resolve from.
     * @returns The resolved location or undefined if not found.
     */
    resolve(obj: Resolvable<any>): NodeLocation | undefined;
    /**
     * @param id The ID of the location.
     * @returns The formatted URL to the location in the admin panel.
     */
    adminURLFor(id: number): string;
    /**
     * Fetches a location or a list of locations from the Pterodactyl API.
     * @param [id] The ID of the location.
     * @param [options] Additional fetch options.
     * @returns The fetched locations(s).
     */
    /**
     * Fetches a location from the API by its ID. This will check the cache first unless the force
     * option is specified.
     *
     * @param id The ID of the location.
     * @param [options] Additional fetch options.
     * @returns The fetched location.
     * @example
     * ```
     * app.locations.fetch(8).then(console.log).catch(console.error);
     * ```
     */
    fetch(id: number, options?: Include<FetchOptions>): Promise<NodeLocation>;
    /**
     * Fetches a list of locations from the API with the given options (default is undefined).
     * @see {@link Include} and {@link FetchOptions}.
     *
     * @param [options] Additional fetch options.
     * @returns The fetched locations.
     * @example
     * ```
     * app.locations.fetch({ include:['nodes'] })
     *  .then(console.log)
     *  .catch(console.error);
     * ```
     */
    fetch(options?: Include<FetchOptions>): Promise<Dict<number, NodeLocation>>;
    /**
     * Queries the API for locations that match the specified query filters. This fetches from the
     * API directly and does not check the cache. Use cache methods for filtering and sorting.
     *
     * Available query filters:
     * * short
     * * long
     *
     * @param entity The entity to query.
     * @param options The query options to filter by.
     * @returns The queried locations.
     * @example
     * ```
     * app.locations.query('us', { filter: 'long' })
     *  .then(console.log)
     *  .catch(console.error);
     * ```
     */
    query(entity: string, options: Filter<Sort<{}>>): Promise<Dict<number, NodeLocation>>;
    /**
     * Creates a location.
     * @param short The short name for the location (usually the country code).
     * @param long The long name for the location.
     * @returns The new location.
     * @example
     * ```
     * app.locations.create('ca', 'canada')
     *  .then(console.log)
     *  .catch(console.error);
     * ```
     */
    create(short: string, long: string): Promise<NodeLocation>;
    /**
     * Updates a location.
     * @param id The ID of the location.
     * @param options The updated short and/or long name of the location.
     * @returns The updated location.
     * @example
     * ```
     * app.locations.update(10, { long: 'united kingdom' })
     *  .then(console.log)
     *  .catch(console.error);
     * ```
     */
    update(id: number, options: {
        short?: string;
        long?: string;
    }): Promise<NodeLocation>;
    /**
     * Deletes a location.
     * @param id The ID of the location.
     * @example
     * ```
     * app.locations.delete(9).catch(console.error);
     * ```
     */
    delete(id: number): Promise<void>;
}
