import type { PteroApp } from '.';
import { BaseManager } from '../structures/BaseManager';
import { Dict } from '../structures/Dict';
import { FetchOptions, Include, PaginationMeta } from '../common';
import { Allocation } from '../common/app';
export declare class NodeAllocationManager extends BaseManager {
    client: PteroApp;
    cache: Dict<number, Dict<number, Allocation>>;
    meta: PaginationMeta;
    /** Allowed filter arguments for allocations. */
    get FILTERS(): readonly never[];
    /** Allowed include arguments for allocations. */
    get INCLUDES(): readonly string[];
    /** Allowed sort arguments for allocations. */
    get SORTS(): readonly never[];
    constructor(client: PteroApp);
    _patch(node: number, data: any): any;
    /**
     * @param id The ID of the allocation.
     * @returns The formatted URL to the allocation in the admin panel.
     */
    adminURLFor(id: number): string;
    /**
     * Fetches a list of allocations on a specific node from the API with the given options
     * (default is undefined).
     * @see {@link Include} and {@link FetchOptions}.
     *
     * @param [options] Additional fetch options.
     * @returns The fetched allocations.
     * @example
     * ```
     * app.allocations.fetch(4, { page: 3 })
     *  .then(console.log)
     *  .catch(console.error);
     * ```
     */
    fetch(node: number, options?: Include<FetchOptions>): Promise<Dict<number, Allocation>>;
    /**
     * Fetches the available allocations on a node and returns a single one.
     * @param node The ID of the node.
     * @param single Whether to return a single allocation.
     * @returns The available allocation(s).
     * @example
     * ```
     * app.allocations.fetchAvailable(4, true)
     *  .then(console.log)
     *  .catch(console.error);
     * ```
     */
    fetchAvailable(node: number, single: true): Promise<Allocation | undefined>;
    /**
     * Fetches the available allocations on a node.
     * @param node The ID of the node.
     * @param single Whether to return a single allocation.
     * @returns The available allocation(s).
     * @example
     * ```
     * app.allocations.fetchAvailable(4, false)
     *  .then(all => all.forEach(a => console.log(a)))
     *  .catch(console.error);
     * ```
     */
    fetchAvailable(node: number, single: false): Promise<Dict<number, Allocation>>;
    /**
     * Creates a number of allocations based on the ports specified. Note that the created
     * allocations will not be returned due to the number that can be created in a single request,
     * which can cause unwanted issues.
     * @param node The ID of the node.
     * @param ip The IP for the allocation.
     * @param ports A list of ports or port ranges for the allocation.
     * @example
     * ```
     * app.allocations.create(4, '10.0.0.1', ['8000-9000'])
     *  .catch(console.error);
     * ```
     */
    create(node: number, ip: string, ports: string[]): Promise<void>;
    /**
     * Deletes an allocation from a node.
     * @param node The ID of the node.
     * @param id The ID of the allocation.
     * @example
     * ```
     * app.allocations.delete(4, 92).catch(console.error);
     * ```
     */
    delete(node: number, id: number): Promise<void>;
}
