import type { PteroClient } from '.';
import { BaseManager } from '../structures/BaseManager';
import { ClientServer } from '../structures/ClientServer';
import { Dict } from '../structures/Dict';
import { FetchOptions, Include } from '../common';
import { ClientMeta, ClientResources, EggVariable, StartupData } from '../common/client';
export declare class ClientServerManager extends BaseManager {
    client: PteroClient;
    cache: Dict<string, ClientServer>;
    /**
     * Pagination metadata that is received from the API.
     * This is not returned by normal methods but is parsed separately.
     */
    meta: ClientMeta | undefined;
    /** Allowed filter arguments for servers (none). */
    get FILTERS(): readonly never[];
    /**
     * Allowed include arguments for servers:
     * * egg
     * * subusers
     */
    get INCLUDES(): readonly string[];
    /** Allowed sort arguments for servers (none). */
    get SORTS(): readonly never[];
    constructor(client: PteroClient);
    /**
     * Transforms the raw server object(s) into class objects.
     * @param data The resolvable server object(s).
     * @returns The resolved server object(s).
     */
    _patch(data: any): any;
    /**
     * @param id The ID of the server.
     * @returns The formatted URL to the server.
     */
    panelURLFor(id: string): string;
    /**
     * Fetches a server from the API by its identifier. This will check the cache first unless the
     * force option is specified.
     *
     * @param id The identifier of the server.
     * @param [options] Additional fetch options.
     * @returns The fetched server.
     * @example
     * ```
     * client.servers.fetch('411d2eb9')
     *  .then(console.log)
     *  .catch(console.error);
     * ```
     */
    fetch(id: string, options?: Include<FetchOptions>): Promise<ClientServer>;
    /**
     * Fetches a list of servers from the API with the given options (default is undefined).
     * @see {@link Include} and {@link FetchOptions}.
     *
     * @param [options] Additional fetch options.
     * @returns The fetched servers.
     * @example
     * ```
     * client.servers.fetch({ perPage: 10 })
     *  .then(console.log)
     *  .catch(console.error);
     * ```
     */
    fetch(options?: Include<FetchOptions>): Promise<Dict<number, ClientServer>>;
    /**
     * Fetches the server resources data of a server.
     * @param id The identifier of the server.
     * @returns The server resources.
     * @example
     * ```
     * client.servers.fetchResources('411d2eb9')
     *  .then(console.log)
     *  .catch(console.error);
     * ```
     */
    fetchResources(id: string): Promise<ClientResources>;
    /**
     * Fetches the server startup and egg variables data.
     * @see {@link StartupData}.
     *
     * @param id The identifier of the server.
     * @returns The startup and egg variable data.
     * @example
     * ```
     * client.servers.fetchStartup('411d2eb9')
     *  .then(console.log)
     *  .catch(console.error);
     * ```
     */
    fetchStartup(id: string): Promise<StartupData>;
    /**
     * Sends a command to the console of a server. Note that this does not return the output from
     * the command, see {@link WebSocketManager} for more information.
     * @param id The identifier of the server.
     * @param command The command to send.
     * @example
     * ```
     * client.servers.sendCommand('411d2eb9', '/say "hello world"')
     *  .catch(console.error);
     * ```
     */
    sendCommand(id: string, command: string): Promise<void>;
    /**
     * Sets the power state of a server.
     * @param id The identifier of the server.
     * @param state The power state to set.
     * @example
     * ```
     * client.servers.setPowerState('411d2eb9', 'start')
     *  .catch(console.error);
     * ```
     */
    setPowerState(id: string, state: 'start' | 'stop' | 'restart' | 'kill'): Promise<void>;
    /**
     * Updates the docker image of a server.
     * @param id The identifier of the server.
     * @param image The docker image.
     * @example
     * ```
     * client.servers.setDockerImage(
     *  '411d2eb9',
     *  'ghcr.io/pterodactyl/yolks:java_17'
     *  )
     *  .catch(console.error);
     * ```
     */
    setDockerImage(id: string, image: string): Promise<void>;
    /**
     * Updates a specified environment variable on a server. The key must be
     * the environment variable name in capital letters, not the normal
     * variable name.
     * @param id The identifier of the server.
     * @param key The environment variable key.
     * @param value The value of the environment variable.
     * @returns The updated egg variable.
     * @example
     * ```
     * await client.servers
     *     .setVariable('b8f32a45', 'SERVER_JARFILE', 'latest.jar')
     *     .then(console.log);
     * ```
     */
    setVariable(id: string, key: string, value: string): Promise<EggVariable>;
    /**
     * Updates the name of a server.
     * @param id The identifier of the server.
     * @param name The new server name.
     * @example
     * ```
     * client.servers.rename('411d2eb9', 'mc-03')
     *  .catch(console.error);
     * ```
     */
    rename(id: string, name: string): Promise<void>;
    /**
     * Triggers the reinstall process of a server.
     * @param id The identifier of the server.
     * @example
     * ```
     * client.servers.reinstall('411d2eb9').catch(console.error);
     * ```
     */
    reinstall(id: string): Promise<void>;
}
