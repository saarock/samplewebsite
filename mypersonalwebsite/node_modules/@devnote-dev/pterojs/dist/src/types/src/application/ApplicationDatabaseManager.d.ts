import type { PteroApp } from '.';
import { BaseManager } from '../structures/BaseManager';
import { Dict } from '../structures/Dict';
import { ApplicationDatabase } from '../common/app';
import { FetchOptions, Include } from '../common';
export declare class ApplicationDatabaseManager extends BaseManager {
    client: PteroApp;
    cache: Dict<number, ApplicationDatabase>;
    serverId: number;
    /** Allowed filter arguments for server databases. */
    get FILTERS(): readonly never[];
    /** Allowed include arguments for server databases. */
    get INCLUDES(): readonly string[];
    /** Allowed sort arguments for server databases. */
    get SORTS(): readonly never[];
    constructor(client: PteroApp, serverId: number);
    _patch(data: any): any;
    fetch(id: number, options?: Include<FetchOptions>): Promise<ApplicationDatabase>;
    fetch(options?: Include<FetchOptions>): Promise<Dict<number, ApplicationDatabase>>;
    create(database: string, remote: string, host: number): Promise<ApplicationDatabase>;
    resetPasword(id: number): Promise<void>;
    delete(id: number): Promise<void>;
}
