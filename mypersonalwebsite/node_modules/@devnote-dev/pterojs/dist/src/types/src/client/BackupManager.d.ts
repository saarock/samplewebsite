import type { PteroClient } from '.';
import { BaseManager } from '../structures/BaseManager';
import { Dict } from '../structures/Dict';
import { FetchOptions, Include } from '../common';
import { Backup, CreateBackupOptions } from '../common/client';
export declare class BackupManager extends BaseManager {
    client: PteroClient;
    cache: Dict<string, Backup>;
    serverId: string;
    /** Allowed filter arguments for backups (none). */
    get FILTERS(): readonly never[];
    /** Allowed include arguments for backups (none). */
    get INCLUDES(): readonly never[];
    /** Allowed sort arguments for backups (none). */
    get SORTS(): readonly never[];
    constructor(client: PteroClient, serverId: string);
    /**
     * Transforms the raw backup object(s) into typed objects.
     * @param data The resolvable backup object(s).
     * @returns The resolved backup object(s).
     */
    _patch(data: any): any;
    /**
     * Fetches a backup from the API by its identifier. This will check the cache first unless the
     * force option is specified.
     *
     * @param id The identifier of the backup.
     * @param [options] Additional fetch options.
     * @returns The fetched backup.
     * @example
     * ```
     * const server = await client.servers.fetch('34740510');
     * await server.backups.fetch({ perPage: 10 })
     *  .then(console.log)
     *  .catch(console.error);
     * ```
     */
    fetch(id: string, options?: Include<FetchOptions>): Promise<Backup>;
    /**
     * Fetches a list of backups from the API with the given options (default is undefined).
     *
     * @param [options] Additional fetch options.
     * @returns The fetched backups.
     * @example
     * ```
     * const server = await client.servers.fetch('34740510');
     * await server.backups.fetch({ perPage: 10 })
     *  .then(console.log)
     *  .catch(console.error);
     * ```
     */
    fetch(options?: Include<FetchOptions>): Promise<Dict<number, Backup>>;
    /**
     * Creates a new backup on the server.
     * @see {@link CreateBackupOptions}.
     *
     * @param options Create backup options.
     * @returns The new backup.
     * @example
     * ```
     * const server = await client.servers.fetch('34740510');
     * await server.backups.create({ name: 'bungee-archive' })
     *  .then(console.log)
     *  .catch(console.error);
     * ```
     */
    create(options?: CreateBackupOptions): Promise<Backup>;
    /**
     * Toggles the locked status of a backup.
     * @param id The UUID of the backup.
     * @returns The updated backup.
     * @example
     * ```
     * const server = await client.servers.fetch('34740510');
     * await server.backups.toggleLock('904df120')
     *  .then(console.log)
     *  .catch(console.error);
     * ```
     */
    toggleLock(id: string): Promise<Backup>;
    /**
     * Fetches the download URL for a specified backup.
     * @param id The UUID of the backup.
     * @returns The download URL.
     * @example
     * ```
     * const server = await client.servers.fetch('34740510');
     * await server.backups.getDownloadURL('904df120')
     *  .then(console.log)
     *  .catch(console.error);
     * ```
     */
    getDownloadURL(id: string): Promise<string>;
    /**
     * Fetches and saves a backup to a specified path on the system.
     * @param id The UUID of the backup.
     * @param dest The file path to save the backup to.
     * @example
     * ```
     * const server = await client.servers.fetch('34740510');
     * await server.backups.download('904df120', './bungee-archive.tar.gz')
     *  .catch(console.error);
     * ```
     */
    download(id: string, dest: string): Promise<void>;
    /**
     * Restores a specified backup to the server.
     * @param id The UUID of the backup.
     * @example
     * ```
     * const server = await client.servers.fetch('34740510');
     * await server.backups.restore('904df120').catch(console.error);
     * ```
     */
    restore(id: string): Promise<void>;
    /**
     * Deletes a specified backup.
     * @param id The UUID of the backup.
     * @example
     * ```
     * const server = await client.servers.fetch('34740510');
     * await server.backups.delete('c4b9c4c7').catch(console.error);
     * ```
     */
    delete(id: string): Promise<void>;
}
