/// <reference types="node" />
import { Axios } from 'axios';
import { EventEmitter } from 'events';
import type { BaseManager } from '../structures/BaseManager';
import { FetchOptions, RequestEvents } from '../common';
export declare type Method = 'GET' | 'POST' | 'PATCH' | 'PUT' | 'DELETE';
export declare class RequestManager extends EventEmitter {
    private _type;
    _domain: string;
    _auth: string;
    instance: Axios;
    _ping: number;
    private _start;
    constructor(_type: string, _domain: string, _auth: string);
    emit<E extends keyof RequestEvents>(event: E, ...args: RequestEvents[E]): boolean;
    on<E extends keyof RequestEvents>(event: E, listener: (...args: RequestEvents[E]) => void): this;
    once<E extends keyof RequestEvents>(event: E, listener: (...args: RequestEvents[E]) => void): this;
    off<E extends keyof RequestEvents>(event: E, listener: (...args: RequestEvents[E]) => void): this;
    getHeaders(): Record<string, string>;
    private debug;
    _make(method: Method, path: string, body?: any): Promise<any>;
    raw(method: Method, url: string, body?: any): Promise<any>;
    private handleResponse;
    private handleError;
    get(path: string, params?: FetchOptions, body?: any, cls?: BaseManager): Promise<any>;
    post(path: string, body?: any): Promise<any>;
    patch(path: string, body?: any): Promise<any>;
    put(path: string, body?: any): Promise<any>;
    delete(path: string, body?: any): Promise<void>;
}
