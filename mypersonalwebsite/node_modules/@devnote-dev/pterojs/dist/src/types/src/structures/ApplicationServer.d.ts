import type { Node } from './Node';
import type { User } from './User';
import type { PteroApp } from '../application';
import { ApplicationDatabaseManager } from '../application/ApplicationDatabaseManager';
import { Limits, FeatureLimits } from '../common';
import { UpdateBuildOptions, UpdateDetailsOptions, UpdateStartupOptions } from '../common/app';
export declare class ApplicationServer {
    client: PteroApp;
    databases: ApplicationDatabaseManager;
    /** The internal ID of the server (separate from UUID). */
    readonly id: number;
    /** The UUID of the server. */
    readonly uuid: string;
    /** A substring of the server's UUID. */
    readonly identifier: string;
    /** The date the server was created. */
    readonly createdAt: Date;
    readonly createdTimestamp: number;
    /** The external ID of the server (if set). */
    externalId: string | undefined;
    /** The name of the server. */
    name: string;
    /** The description of the server (if set). */
    description: string | undefined;
    /** The current processing status of the server. */
    status: string | null;
    /** Whether the server is suspended from action. */
    suspended: boolean;
    /** An object containing the server's limits. */
    limits: Limits;
    /** An object containing the server's feature limits. */
    featureLimits: FeatureLimits;
    /** The ID of the server owner. */
    ownerId: number;
    /**
     * The owner of the server. This is not fetched by default and must be
     * retrieved by including 'user' in ApplicationServerManager#fetch.
     */
    owner: User | undefined;
    /** The ID of the node the server is on. */
    nodeId: number;
    /**
     * The node the server is on. This is not fetched by default and must be
     * retrieved by including 'node' in `ApplicationServerManager#fetch`.
     */
    node: Node | undefined;
    /** The ID of the allocation for the server. */
    allocation: number;
    /** The ID of the nest the server is part of. */
    nest: number;
    /** The ID of the egg the server uses. */
    egg: number;
    container: {
        startupCommand: string;
        image: string;
        installed: boolean;
        environment: Record<string, string>;
    };
    constructor(client: PteroApp, data: any);
    _patch(data: any): void;
    /**
     * Returns a formatted URL to the server.
     * @returns The formatted URL.
     */
    get panelURL(): string;
    /**
     * Returns a formatted URL to the server in the admin panel.
     * @returns The formatted URL.
     */
    get adminURL(): string;
    /**
     * Fetches the User object of the server owner.
     * The user can be accessed via {@link ApplicationServer.owner}.
     * @returns The fetched user.
     */
    fetchOwner(): Promise<User>;
    /**
     * Updates the details of the server.
     * @param options Update details options.
     * @see {@link UpdateDetailsOptions}.
     * @returns The updated instance.
     */
    updateDetails(options: UpdateDetailsOptions): Promise<this>;
    /**
     * Updates the build configuration of the server.
     * @param options Update build options.
     * @returns The updated instance.
     */
    updateBuild(options: UpdateBuildOptions): Promise<this>;
    /**
     * Updates the startup configuration of the server.
     * @param options Update startup options.
     * @see {@link UpdateStartupOptions}.
     * @returns The updated instance.
     */
    updateStartup(options: UpdateStartupOptions): Promise<this>;
    /** Suspends the server. */
    suspend(): Promise<void>;
    /** Unsuspends the server. */
    unsuspend(): Promise<void>;
    /**
     * Triggers the reinstall process for the server.
     * Note: most endpoints will be unavailable until this is complete.
     */
    reinstall(): Promise<void>;
    /**
     * Converts the server into a JSON object, relative to the API
     * response object.
     * @returns The JSON object.
     */
    toJSON(): object;
    /** @returns The string representation of the server. */
    toString(): string;
}
