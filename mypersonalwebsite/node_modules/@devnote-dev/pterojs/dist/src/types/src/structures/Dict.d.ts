export interface DictConstructor {
    new (): Dict<any, any>;
    new <K, V>(entries?: readonly [K, V][]): Dict<K, V>;
    new <K, V>(iterable?: Iterable<readonly [K, V]>): Dict<K, V>;
    readonly [Symbol.iterator]: DictConstructor;
    readonly [Symbol.species]: DictConstructor;
}
/**
 * Dict (or Dictionary) is an extended Map with additional helper methods
 * used for manager caches in the PteroJS library.
 */
export declare class Dict<K, V> extends Map<K, V> {
    ['constructor']: DictConstructor;
    private _limit;
    get limit(): number;
    /**
     * Sets a limit for the number of entries the dict can have.
     * **Note:** this cannot be changed once set. Attempting to will throw an error.
     * @param amount The number of entries allowed for the dict.
     */
    setLimit(amount: number): void;
    /** @returns Whether the dict has a set limit. */
    isLimited(): boolean;
    set(key: K, value: V): this;
    /**
     * Checks if at least one of the entries in the dict pass the function.
     * @param fn The function to apply to the dict.
     */
    some(fn: (value: V, key: K, dict: this) => boolean): boolean;
    /**
     * Checks if all the entries in the dict pass the function.
     * @param fn The function to apply to the dict.
     */
    every(fn: (value: V, key: K, dict: this) => boolean): boolean;
    /**
     * Checks that any of the specified keys exist in the dict.
     * @param keys The keys to check for.
     */
    hasAny(...keys: K[]): boolean;
    /**
     * Checks that all of the specified keys exist in the dict.
     * @param keys The keys to check for.
     */
    hasAll(...keys: K[]): boolean;
    /**
     * Returns the first entry (or entries if otherwise specified) in the dict.
     * @param [amount] The number of entries to return from the start of the dict.
     */
    first<T extends number | undefined>(amount?: T): T extends undefined ? V : V[];
    /**
     * Returns the first key (or keys if otherwise specified) in the dict.
     * @param [amount] The number of keys to return from the start of the dict.
     */
    firstKey<T extends number | undefined>(amount?: T): T extends undefined ? K : K[];
    /**
     * Returns the last entry (or entries if otherwise specified) in the dict.
     * @param [amount] The number of entries to return from the end of the dict.
     */
    last<T extends number | undefined>(amount?: T): T extends undefined ? V : V[];
    /**
     * Returns the last key (or keys if otherwise specified) in the dict.
     * @param [amount] The number of keys to return from the end of the dict.
     */
    lastKey<T extends number | undefined>(amount?: T): T extends undefined ? K : K[];
    /**
     * Returns a random entry (or entries if otherwise specified) in the dict.
     * @param [amount] The number of entries to return from the dict.
     */
    random<T extends number | undefined>(amount?: T): T extends undefined ? V : V[];
    /**
     * Returns a random key (or keys if otherwise specified) in the dict.
     * @param [amount] The number of keys to return from the dict.
     */
    randomKey<T extends number | undefined>(amount?: T): T extends undefined ? K : K[];
    /**
     * Applies the function to each entry in the dict and returns an array of
     * the results.
     * @param fn The function to apply to the dict.
     * @returns The mapped results.
     */
    map<T>(fn: (value: V, key: K, dict: this) => T): T[];
    /**
     * Applies the function to each entry in the dict and returns a dict of the
     * results that passed.
     * @param fn The function to apply to the dict.
     * @returns The filtered dict.
     */
    filter(fn: (value: V, key: K, dict: this) => boolean): Dict<K, V>;
    /**
     * Applies a function to each entry in the dict and returns the first one
     * that passes.
     * @param fn The function to apply to the dict.
     */
    find(fn: (value: V, key: K, dict: this) => boolean): V | undefined;
    /**
     * Applies a function to each entry in the dict and returns the number of
     * items removed.
     * @param fn The function to apply to the dict.
     * @returns The number of sweeped entries.
     */
    sweep(fn: (value: V, key: K, dict: this) => boolean): number;
    /**
     * Applies a function to each entry in the dict and returns 2 dicts, the first
     * containing entries that passed the function and the second containing
     * the failed entries.
     * @param fn The function to apply to the dict.
     * @returns The passed and failed dicts.
     */
    part(fn: (value: V, key: K, dict: this) => boolean): Dict<K, V>[];
    /**
     * Reduces each entry in the dict to a single value.
     * @param fn The function to apply to the dict.
     * @returns The reduced value.
     */
    reduce<T>(fn: (value: V, key: K, dict: this) => T, acc: T): T;
    /**
     * Joins one or more dicts with the current one and returns the value.
     * @param dict The dicts to join.
     * @returns The joined dicts.
     */
    join(...dict: Dict<K, V>[]): Dict<K, V>;
    /**
     * @param dict The dict to compare differences to.
     * @returns A dict containing the different entries between both dicts.
     */
    difference(dict: Dict<K, V>): Dict<K, V>;
    /**
     * Updates the values of the current dict with the specified dict, settings the
     * values in place.
     * @param dict The dict to update with.
     */
    update(dict: Dict<K, V>): void;
    /** @returns A clone of the dict. */
    clone(): Dict<K, V>;
}
