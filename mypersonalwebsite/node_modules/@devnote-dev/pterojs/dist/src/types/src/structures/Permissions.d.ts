/**
 * Represents all the Pterodactyl server permissions as flags.
 */
export declare enum Flags {
    WEBSOCKET_CONNECT = "websocket.connect",
    CONTROL_CONSOLE = "control.console",
    CONTROL_START = "control.start",
    CONTROL_STOP = "control.stop",
    CONTROL_RESTART = "control.restart",
    USER_CREATE = "user.create",
    USER_READ = "user.read",
    USER_UPDATE = "user.update",
    USER_DELETE = "user.delete",
    FILE_CREATE = "file.create",
    FILE_READ = "file.read",
    FILE_READ_CONTENT = "file.read-content",
    FILE_UPDATE = "file.update",
    FILE_DELETE = "file.delete",
    FILE_ARCHIVE = "file.archive",
    FILE_SFTP = "file.sftp",
    BACKUP_CREATE = "backup.create",
    BACKUP_READ = "backup.read",
    BACKUP_UPDATE = "backup.update",
    BACKUP_DELETE = "backup.delete",
    ALLOCATION_READ = "allocation.read",
    ALLOCATION_CREATE = "allocation.create",
    ALLOCATION_UPDATE = "allocation.update",
    ALLOCATION_DELETE = "allocation.delete",
    STARTUP_READ = "startup.read",
    STARTUP_UPDATE = "startup.update",
    DATABASE_CREATE = "database.create",
    DATABASE_READ = "database.read",
    DATABASE_UPDATE = "database.update",
    DATABASE_DELETE = "database.delete",
    DATABASE_VIEW_PASSWORD = "database.view_password",
    SCHEDULE_CREATE = "schedule.create",
    SCHEDULE_READ = "schedule.read",
    SCHEDULE_UPDATE = "schedule.update",
    SCHEDULE_DELETE = "schedule.delete",
    SETTINGS_RENAME = "settings.rename",
    SETTINGS_REINSTALL = "settings.reinstall",
    ADMIN_WEBSOCKET_ERRORS = "admin.websocket.errors",
    ADMIN_WEBSOCKET_INSTALL = "admin.websocket.install",
    ADMIN_WEBSOCKET_TRANSFER = "admin.websocket.transfer"
}
export declare class Permissions {
    /** @returns All the server control permissions. */
    static get CONTROL(): readonly Flags[];
    /** @returns All of the user/subuser permissions. */
    static get USERS(): readonly Flags[];
    /** @returns All of the server file permissions. */
    static get FILES(): readonly Flags[];
    /** @returns All the server backup permissions. */
    static get BACKUPS(): readonly Flags[];
    /** @returns All the server allocation permissions. */
    static get ALLOCATIONS(): readonly Flags[];
    /** @returns All the server startup permissions. */
    static get STARTUPS(): readonly Flags[];
    /** @returns All the server database permissions. */
    static get DATABASES(): readonly Flags[];
    /** @returns All the server schedule permissions. */
    static get SCHEDULES(): readonly Flags[];
    /** @returns All the server settings permissions. */
    static get SETTINGS(): readonly Flags[];
    /** @returns The admin permissions. */
    static get ADMIN(): readonly Flags[];
    /** The string permission value. */
    value: string[];
    /**
     * @param perms The data to resolve permissions from.
     */
    constructor(...perms: string[]);
    /**
     * Resolves a permissions object from a specified source.
     * @param perms The permissions to resolve.
     * @returns The resolved permissions.
     */
    static resolve(...perms: string[]): string[];
    /**
     * @param perms The permissions to check for.
     * @returns True if the current value has any of the specified permissions.
     */
    hasAny(...perms: string[]): boolean;
    /**
     * @param perms The permissions to check for.
     * @returns True if the current value has all of the specified permissions.
     */
    hasAll(...perms: string[]): boolean;
    /**
     * @returns True if the current value includes administrative permissions.
     */
    isAdmin(): boolean;
    /**
     * Adds the specified permissions to the current value.
     * @param perms The permissions to add.
     * @returns The updated permissions instance.
     */
    add(...perms: string[]): this;
    /**
     * Removes the specified permissions from the current value.
     * @param perms The permissions to remove.
     * @returns The updated permissions instance.
     */
    remove(...perms: string[]): this;
    /**
     * @returns An object with all the permissions having `true` or `false`
     * values if they are currently present.
     */
    serialize(): Record<string, boolean>;
}
