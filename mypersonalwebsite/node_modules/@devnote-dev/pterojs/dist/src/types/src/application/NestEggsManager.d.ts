import type { PteroApp } from '.';
import { BaseManager } from '../structures/BaseManager';
import { Dict } from '../structures/Dict';
import { FetchOptions, Include } from '../common';
import { Egg } from '../common/app';
export declare class NestEggsManager extends BaseManager {
    client: PteroApp;
    cache: Dict<number, Egg>;
    /** Allowed filter arguments for eggs (none). */
    get FILTERS(): readonly never[];
    /**
     * Allowed include arguments for eggs:
     * * nest
     * * servers
     * * config
     * * script
     * * variables
     */
    get INCLUDES(): readonly string[];
    /** Allowed sort arguments for eggs (none). */
    get SORTS(): readonly never[];
    constructor(client: PteroApp);
    /**
     * Transforms the raw egg object(s) into typed objects.
     * @param data The resolvable egg object(s).
     * @returns The resolved egg object(s).
     */
    _patch(data: any): any;
    /**
     * @param id The ID of the egg.
     * @returns The formatted URL to the egg in the admin panel.
     */
    adminURLFor(id: number): string;
    /**
     * Fetches an egg from the API by its ID. This will check the cache first unless the force
     * option is specified.
     *
     * @param nest The ID of the nest.
     * @param id The ID of the egg.
     * @param [options] Additional fetch options.
     * @returns The fetched egg.
     * @example
     * ```
     * app.nests.eggs.fetch(1, 16).then(console.log).catch(console.error);
     * ```
     */
    fetch(nest: number, id: number, options?: Include<FetchOptions>): Promise<Egg>;
    /**
     * Fetches a list of eggs from the API by its ID. This will check the cache first unless the
     * force option is specified.
     *
     * @param nest The ID of the nest.
     * @param [options] Additional fetch options.
     * @returns The fetched eggs.
     * @example
     * ```
     * app.nests.eggs.fetch(1)
     *  .then(eggs => eggs.forEach(e => console.log(e)))
     *  .catch(console.error);
     * ```
     */
    fetch(nest: number, options?: Include<FetchOptions>): Promise<Dict<number, Egg>>;
}
