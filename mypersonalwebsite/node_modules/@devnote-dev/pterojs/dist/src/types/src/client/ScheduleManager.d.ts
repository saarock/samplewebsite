import type { PteroClient } from '.';
import { Dict } from '../structures/Dict';
import { Schedule } from '../structures/Schedule';
import { FetchOptions } from '../common';
import { CreateScheduleOptions } from '../common/client';
export declare class ScheduleManager {
    client: PteroClient;
    cache: Dict<string, Dict<number, Schedule>>;
    constructor(client: PteroClient);
    /**
     * Transforms the raw schedule object(s) into class objects.
     * @param data The resolvable schedule object(s).
     * @returns The resolved schedule object(s).
     */
    _patch(id: string, data: any): any;
    /**
     * Fetches a schedule from the API by its ID. This will check the cache first unless the force
     * option is specified.
     *
     * @param server The identifier of the server.
     * @param id The ID of the schedule.
     * @param [options] Additional fetch options.
     * @returns The fetched schedule.
     * @example
     * ```
     * client.schedules.fetch('411d2eb9', 12)
     *  .then(console.log)
     *  .catch(console.error);
     * ```
     */
    fetch(server: string, id: number, options?: FetchOptions): Promise<Schedule>;
    /**
     * Fetches a list of schedules from the API with the given options (default is undefined).
     *
     * @param server The identifier of the server.
     * @param [options] Additional fetch options.
     * @returns The fetched schedule.
     * @example
     * ```
     * client.schedules.fetch('411d2eb9', { perPage: 10 })
     *  .then(console.log)
     *  .catch(console.error);
     * ```
     */
    fetch(server: string, options?: FetchOptions): Promise<Dict<number, Schedule>>;
    /**
     * Creates a schedule for a specified server.
     * @see {@link CreateScheduleOptions}.
     *
     * @param server The identifier of the server.
     * @param options Create schedule options.
     * @returns The new schedule.
     * @example
     * ```
     * client.schedules.create(
     *  '411d2eb9',
     *  {
     *   name: 'Weekly backup',
     *   active: false,
     *   month: '1',
     *   hour: '*',
     *   minute: '*'
     *  }
     * )
     *  .then(console.log)
     *  .catch(console.error);
     * ```
     */
    create(server: string, options: CreateScheduleOptions): Promise<Schedule>;
    /**
     * Updates a schedule on the specified server.
     * @see {@link CreateScheduleOptions}.
     *
     * @param server The identifier of the server.
     * @param id The ID of the schedule.
     * @param options Update schedule options.
     * @returns The updated schedule.
     * @example
     * ```
     * client.schedules.update('411d2eb9', 5, { onlyWhenOnline: true })
     *  .then(console.log)
     *  .catch(console.error);
     * ```
     */
    update(server: string, id: number, options: Partial<CreateScheduleOptions>): Promise<Schedule>;
    /**
     * Deletes a schedule from a specified server.
     * @param server The identifier of the server.
     * @param id The ID of the schedule.
     * @example
     * ```
     * client.schedules.delete('411d2eb9', 3).catch(console.error);
     * ```
     */
    delete(server: string, id: number): Promise<void>;
}
