import type { PteroApp } from '.';
import { BaseManager } from '../structures/BaseManager';
import { Dict } from '../structures/Dict';
import { CreateUserOptions } from '../common/app';
import { User } from '../structures/User';
import { UpdateUserOptions } from '../common/app';
import { FetchOptions, Filter, Include, PaginationMeta, Resolvable, Sort } from '../common';
export declare class UserManager extends BaseManager {
    client: PteroApp;
    cache: Dict<number, User>;
    meta: PaginationMeta;
    /**
     * Allowed filter arguments for users:
     * * email
     * * uuid
     * * username
     * * externalId
     */
    get FILTERS(): readonly string[];
    /**
     * Allowed include arguments for users:
     * * servers
     */
    get INCLUDES(): readonly string[];
    /**
     * Allowed sort arguments for users:
     * * id
     * * -id
     * * uuid
     * * -uuid
     */
    get SORTS(): readonly string[];
    constructor(client: PteroApp);
    /**
     * Transforms the raw user object(s) into class objects.
     * @param data The resolvable user object(s).
     * @returns The resolved user object(s).
     */
    _patch(data: any): any;
    /**
     * Resolves a user from an object. This can be:
     * * a string
     * * a number
     * * an object
     *
     * @param obj The object to resolve from.
     * @returns The resolved user or undefined if not found.
     */
    resolve(obj: Resolvable<User>): User | undefined;
    /**
     * @param id The ID of the user.
     * @returns The formatted URL to the user in the admin panel.
     */
    adminURLFor(id: number): string;
    /**
     * Fetches a user from the API by its ID. This will check the cache first unless the force
     * option is specified.
     *
     * @param id The ID of the user.
     * @param [options] Additional fetch options.
     * @returns The fetched user.
     * @example
     * ```
     * app.users.fetch(5).then(console.log).catch(console.error);
     * ```
     */
    fetch(id: number, options?: Include<FetchOptions>): Promise<User>;
    /**
     * Fetches a user from the API by its external ID. This will check the cache first unless the
     * force option is specified.
     *
     * @param id The external ID of the user.
     * @param [options] Additional fetch options.
     * @returns The fetched user.
     * @example
     * ```
     * app.users.fetch('admin').then(console.log).catch(console.error);
     * ```
     */
    fetch(id: string, options?: Include<FetchOptions>): Promise<User>;
    /**
     * Fetches a list of users from the API with the given options (default is undefined).
     * @see {@link Include} and {@link FetchOptions}.
     *
     * @param [options] Additional fetch options.
     * @returns The fetched users.
     * @example
     * ```
     * app.users.fetch({ perPage: 20 }).then(console.log).catch(console.error);
     * ```
     */
    fetch(options?: Include<FetchOptions>): Promise<Dict<number, User>>;
    /** @deprecated Use {@link UserManager.fetch}. */
    fetchExternal(id: string, options: Include<FetchOptions>): Promise<User>;
    /**
     * Queries the API for users that match the specified query filters. This fetches from the
     * API directly and does not check the cache. Use cache methods for filtering and sorting.
     *
     * Available query filters:
     * * email
     * * uuid
     * * username
     * * externalId
     *
     * Available sort options:
     * * id
     * * -id
     * * uuid
     * * -uuid
     *
     * @param entity The entity to query.
     * @param options The query options to filter by.
     * @returns The queried users.
     * @example
     * ```
     * app.users.query('d5f506c9', { filter: 'uuid' })
     *  .then(console.log)
     *  .catch(console.error);
     * ```
     */
    query(entity: string, options: Filter<Sort<{}>>): Promise<Dict<number, User>>;
    /**
     * Creates a user account.
     * @see {@link CreateUserOptions}.
     * @param options Create user options.
     * @returns The new user.
     * @example
     * ```
     * app.users.create({
     *  email: 'user@example.com',
     *  username: 'example-user',
     *  firstname: 'example',
     *  lastname: 'user',
     *  externalId: 'example1'
     * })
     *  .then(console.log)
     *  .catch(console.error);
     * ```
     */
    create(options: CreateUserOptions): Promise<User>;
    /**
     * Updates the user account with the specified options.
     * @see {@link UpdateUserOptions}.
     * @param id The ID of the user.
     * @param options Update user options.
     * @returns The updated user.
     * @example
     * ```
     * app.users.update(7, { externalId: 'admin2', isAdmin: true })
     *  .then(console.log)
     *  .catch(console.error);
     * ```
     */
    update(id: number, options: Partial<UpdateUserOptions>): Promise<User>;
    /**
     * Deletes a user account.
     * @param id The ID of the user.
     * @example
     * ```
     * app.users.delete(8).catch(console.error);
     * ```
     */
    delete(id: number): Promise<void>;
}
