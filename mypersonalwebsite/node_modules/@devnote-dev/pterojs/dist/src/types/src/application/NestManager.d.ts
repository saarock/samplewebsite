import type { PteroApp } from '.';
import { BaseManager } from '../structures/BaseManager';
import { Dict } from '../structures/Dict';
import { PaginationMeta } from '../common';
import { Nest } from '../common/app';
import { NestEggsManager } from './NestEggsManager';
export declare class NestManager extends BaseManager {
    client: PteroApp;
    cache: Dict<number, Nest>;
    meta: PaginationMeta;
    eggs: NestEggsManager;
    /** Allowed filter arguments for nests (none). */
    get FILTERS(): readonly never[];
    /**
     * Allowed include arguments for nests:
     * * eggs
     * * servers
     */
    get INCLUDES(): readonly string[];
    /** Allowed sort arguments for nests (none). */
    get SORTS(): readonly never[];
    constructor(client: PteroApp);
    /**
     * Transforms the raw nest object(s) into typed objects.
     * @param data The resolvable nest object(s).
     * @returns The resolved nest object(s).
     */
    _patch(data: any): any;
    /**
     * @param id The ID of the nest.
     * @returns The formatted URL to the nest in the admin panel.
     */
    adminURLFor(id: number): string;
    /**
     * Fetches a nest from the API with the given options (default is undefined).
     * @param id The ID of the nest.
     * @param [include] Optional include arguments.
     * @returns The fetched nest.
     * @example
     * ```
     * app.nests.fetch(1).then(console.log).catch(console.error);
     * ```
     */
    fetch(id: number, include?: string[]): Promise<Nest>;
    /**
     * Fetches a list of nests from the API with the given options (default is undefined).
     * @param [include] Optional include arguments.
     * @returns The fetched nest.
     * @example
     * ```
     * app.nests.fetch()
     *  .then(nests => nests.forEach(n => console.log(n)))
     *  .catch(console.error);
     * ```
     */
    fetch(include?: string[]): Promise<Dict<number, Nest>>;
}
