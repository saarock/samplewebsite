import type { PteroClient } from '.';
import { Dict } from '../structures/Dict';
import { NetworkAllocation } from '../common/client';
export declare class NetworkManager {
    client: PteroClient;
    cache: Dict<number, NetworkAllocation>;
    serverId: string;
    constructor(client: PteroClient, serverId: string);
    /**
     * Transforms the raw allocation object(s) into typed objects.
     * @param data The resolvable allocation object(s).
     * @returns The resolved allocation object(s).
     */
    _patch(data: any): any;
    /**
     * Fetches the network allocations on the server.
     * @returns The fetched network allocations.
     * @example
     * ```
     * const server = await client.servers.fetch('1c639a86');
     * await server.network.fetch()
     *  .then(console.log)
     *  .catch(console.error);
     * ```
     */
    fetch(): Promise<Dict<number, NetworkAllocation>>;
    /**
     * Sets the notes of a specified network allocation.
     * @param id The ID of the network allocation.
     * @param notes The notes to set.
     * @returns The updated network allocation.
     * @example
     * ```
     * const server = await client.servers.fetch('1c639a86');
     * await server.network.setNote(14, 'bungee')
     *  .then(console.log)
     *  .catch(console.error);
     * ```
     */
    setNote(id: number, notes: string): Promise<NetworkAllocation>;
    /**
     * Sets the primary allocation of the server.
     * @param id The ID of the network allocation.
     * @returns The updated network allocation.
     * @example
     * ```
     * const server = await client.servers.fetch('1c639a86');
     * await server.network.setPrimary(14)
     *  .then(console.log)
     *  .catch(console.error);
     * ```
     */
    setPrimary(id: number): Promise<NetworkAllocation>;
    /**
     * Unassigns the specified network allocation form the server.
     * @param id The ID of the network allocation.
     * @example
     * ```
     * const server = await client.servers.fetch('1c639a86');
     * await server.network.unassign(12).catch(console.error);
     * ```
     */
    unassign(id: number): Promise<void>;
}
