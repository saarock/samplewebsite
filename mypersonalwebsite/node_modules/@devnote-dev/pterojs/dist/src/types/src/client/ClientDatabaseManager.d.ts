import type { PteroClient } from '.';
import { BaseManager } from '../structures/BaseManager';
import { Dict } from '../structures/Dict';
import { FetchOptions, Include } from '../common';
import { ClientDatabase } from '../common/client';
export declare class ClientDatabaseManager extends BaseManager {
    client: PteroClient;
    cache: Dict<number, ClientDatabase>;
    serverId: string;
    /** Allowed filter arguments for databases (none). */
    get FILTERS(): readonly never[];
    /**
     * Allowed include arguments for databases:
     * * password
     */
    get INCLUDES(): readonly string[];
    /** Allowed sort arguments for databases (none). */
    get SORTS(): readonly never[];
    constructor(client: PteroClient, serverId: string);
    /**
     * Transforms the raw database object(s) into typed objects.
     * @param data The resolvable database object(s).
     * @returns The resolved database object(s).
     */
    _patch(data: any): any;
    /**
     * Fetches a list of databases from the API with the given options (default is undefined).
     *
     * @param [options] Additional fetch options.
     * @returns The fetched databases.
     * @example
     * ```
     * const server = await client.servers.fetch('1c639a86');
     * await server.databases.fetch({ page: 2 })
     *  .then(console.log)
     *  .catch(console.error);
     * ```
     */
    fetch(options?: Include<FetchOptions>): Promise<Dict<number, ClientDatabase>>;
    /**
     * Creates a database on the server.
     * @param database The name of the database.
     * @param remote The connections allowed to the database.
     * @returns The new database.
     */
    create(database: string, remote: string): Promise<ClientDatabase>;
    /**
     * Rotates the password of a specified database.
     * @param id The ID of the database.
     * @returns The updated database.
     * @example
     * ```
     * const server = await client.servers.fetch('1c639a86');
     * await server.databases.rotate(1)
     *  .then(console.log)
     *  .catch(console.error);
     * ```
     */
    rotate(id: number): Promise<ClientDatabase>;
    /**
     * Deletes a database from the server.
     * @param id The ID of the database.
     * @example
     * ```
     * const server = await client.servers.fetch('1c639a86');
     * await server.databases.delete(2).catch(console.error);
     * ```
     */
    delete(id: number): Promise<void>;
}
