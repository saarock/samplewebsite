import type { ApplicationServer } from './ApplicationServer';
import type { Dict } from './Dict';
import type { PteroApp } from '../application';
import { DaemonData, NodeLocation } from '../common';
import { CreateNodeOptions, NodeConfiguration } from '../common/app';
export declare class Node {
    readonly client: PteroApp;
    /** The internal ID of the node (separate from UUID). */
    readonly id: number;
    /** The UUID of the node. */
    readonly uuid: string;
    /** The date the node was created. */
    readonly createdAt: Date;
    /** Whether the node is public. */
    public: boolean;
    /** The name of the node. */
    name: string;
    /** The description of the server (if set). */
    description: string | undefined;
    /** The ID of the location the node is on. */
    locationId: number;
    /**
     * The location object the node is on. This is not fetched by default
     * and must be retrieved by including 'location' in `NodeManager#fetch`.
     */
    location: NodeLocation | undefined;
    /** A dict of servers on the node. */
    servers: Dict<number, ApplicationServer>;
    /** The FQDN of the node. */
    fqdn: string;
    /** The HTTP scheme of the node. */
    scheme: string;
    /** Whether the node is behind a proxy. */
    behindProxy: boolean;
    /** Whether the node is in maintenance mode. */
    maintenance: boolean;
    /** The amount of memory the node has. */
    memory: number;
    /** The amount of memory the node has overallocated. */
    overallocatedMemory: number;
    /** The amount of disk the node has. */
    disk: number;
    /** The amount of disk the node has overallocated. */
    overallocatedDisk: number;
    /** The maximum upload size for the node. */
    uploadSize: number;
    /** The Wings daemon information. */
    daemon: DaemonData;
    constructor(client: PteroApp, data: any);
    _patch(data: any): void;
    /**
     * Returns a formatted URL to the node in the admin panel.
     * @returns The formatted URL.
     */
    get adminURL(): string;
    /**
     * Fetches the configuration of the node.
     * @returns The node configuration.
     */
    getConfig(): Promise<NodeConfiguration>;
    /**
     * Updates the node with the specified options.
     * @param options Update node options.
     * @see {@link CreateNodeOptions UpdateNodeOptions}.
     * @returns The updated instance.
     */
    update(options: Partial<CreateNodeOptions>): Promise<this>;
    /**
     * Converts the node into a JSON object, relative to the API
     * response object.
     * @returns The JSON object.
     */
    toJSON(): object;
    /** @returns The string representation of the node. */
    toString(): string;
}
