import type { PteroClient } from '.';
import { Dict } from '../structures/Dict';
import { File, FileChmodData } from '../common/client';
export declare class FileManager {
    client: PteroClient;
    cache: Dict<string, Dict<string, File>>;
    serverId: string;
    constructor(client: PteroClient, serverId: string);
    /**
     * Transforms the raw file object(s) into typed objects.
     * @param data The resolvable file object(s).
     * @returns The resolved file object(s).
     */
    _patch(dir: string, data: any): Dict<string, File>;
    /**
     * Returns a URI-encoded UNIX version of the specified path for requests.
     * @param path The path to clean.
     * @returns The cleaned path.
     */
    private clean;
    /**
     * Fetches the files/directories in a specified direcory (defaults to root).
     * @param [dir] The directory to fetch from.
     * @returns The fetched files.
     * @example
     * ```
     * const server = await client.servers.fetch('aea005b6');
     * await server.files.fetch().then(console.log).catch(console.error);
     * ```
     */
    fetch(dir?: string): Promise<Dict<string, File>>;
    /**
     * Fetches the contents of a specified file. The content is always returned as a
     * string by default, regardless of file type.
     * @param path The file path.
     * @returns The file contents.
     * @example
     * ```
     * const server = await client.servers.fetch('aea005b6');
     * await server.files.getContents('./install.log')
     *  .then(console.log)
     *  .catch(console.error);
     * ```
     */
    getContents(path: string): Promise<string>;
    /**
     * Fetches the download URL for a specified file.
     * @param path The file path.
     * @returns The download URL.
     * @example
     * ```
     * const server = await client.servers.fetch('aea005b6');
     * await server.files.getDownloadURL('./config.yml')
     *  .then(console.log)
     *  .catch(console.error);
     * ```
     */
    getDownloadURL(path: string): Promise<string>;
    /**
     * Fetches and saves a file to a specified path on the system.
     * @param path The file path.
     * @param dest The file path to save the file to.
     * @example
     * ```
     * const server = await client.servers.fetch('aea005b6');
     * await server.files.download('./config.yml', '/mc/config.yml')
     *  .catch(console.error);
     * ```
     */
    download(path: string, dest: string): Promise<void>;
    /**
     * Fetches the upload URL for a specified directory (defaults to root).
     * @param [dir] The directory the files should be uploaded to.
     * @returns The upload URL.
     * @example
     * ```
     * const server = await client.servers.fetch('aea005b6');
     * await server.files.getUploadURL('./plugins')
     *  .then(console.log)
     *  .catch(console.error);
     * ```
     */
    getUploadURL(dir?: string): Promise<string>;
    /**
     * Uploads a file from the system to a specified directory on the server.
     * @param dir The directory the files should be uploaded to.
     * @param file The path to the file on the system.
     * @todo
     */
    private upload;
    /**
     * Writes the content to a specified file.
     * @param path The file path.
     * @param content The content to write.
     * @example
     * ```
     * const server = await client.servers.fetch('aea005b6');
     * await server.files.write(
     *  './config.yml',
     *  'listeners:\n- host: 0.0.0.0:6203\n query_port: 6203'
     * )
     *  .catch(console.error);
     * ```
     */
    write(path: string, content: any): Promise<void>;
    /**
     * Creates a folder in a specified root folder.
     * @param path The root path to create the directory in.
     * @param name The name of the directory.
     * @example
     * ```
     * const server = await client.servers.fetch('aea005b6');
     * await server.files.createFolder('./', 'ext').catch(console.error);
     * ```
     */
    createFolder(path: string, name: string): Promise<void>;
    /**
     * Renames one or more files in a specified directory.
     * @param path The root path of the files.
     * @param files The file rename descriptors.
     * @example
     * ```
     * const server = await client.servers.fetch('aea005b6');
     * await server.files.rename(
     *  './',
     *  [
     *   { from: 'install.log', to: 'old-install.log' },
     *   { from: '_config.yml', to: 'new-config.yml' }
     *  ]
     * )
     *  .catch(console.error);
     * ```
     */
    rename(path: string, files: {
        from: string;
        to: string;
    }[]): Promise<void>;
    /**
     * Changes the permissions on one or more files in a specified directory.
     * @param dir The root path of the files.
     * @param files The file mode descriptors.
     * @example
     * ```
     * const server = await client.servers.fetch('aea005b6');
     * await server.files.chmod(
     *  './',
     *  [{ file: 'server.jar', mode: 0o755 }]
     * )
     *  .catch(console.error);
     * ```
     */
    chmod(dir: string, files: FileChmodData[]): Promise<void>;
    /**
     * Copies the specified file in its directory.
     * @param path The path of the file to copy.
     * @example
     * ```
     * const server = await client.servers.fetch('aea005b6');
     * await server.files.copy('server.properties').catch(console.error);
     * ```
     */
    copy(path: string): Promise<void>;
    /**
     * Compresses the specified files into a zip file.
     * @param dir The root directory of the files.
     * @param files The files to be compressed.
     * @returns The compressed files.
     * @example
     * ```
     * const server = await client.servers.fetch('aea005b6');
     * await server.files.compress(
     *  './'
     *  ['server.properties', 'server.jar', 'config.yml']
     * )
     *  .then(console.log)
     *  .catch(console.error);
     * ```
     */
    compress(dir: string, files: string[]): Promise<Dict<string, File>>;
    /**
     * Decompresses the specified file in its directory.
     * @param dir The root directory of the file.
     * @param file The file to decompress.
     * @example
     * ```
     * const server = await client.servers.fetch('aea005b6');
     * await server.files.decompress('./ext', 'archive-2022-08-25T034234Z.tar.gz')
     *  .catch(console.error);
     * ```
     */
    decompress(dir: string, file: string): Promise<void>;
    /**
     * Deletes one or more files in the specified directory.
     * @param dir The root directory of the files.
     * @param files The files to delete.
     * @example
     * ```
     * const server = await client.servers.fetch('aea005b6');
     * await server.files.delete('./', ['old-install.log'])
     *  .catch(console.error);
     * ```
     */
    delete(dir: string, files: string[]): Promise<void>;
}
