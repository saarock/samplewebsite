import type { PteroClient } from '../client';
import { Dict } from './Dict';
import { Cron, ScheduleTask, ScheduleTaskAction, CreateScheduleOptions } from '../common/client';
export declare class Schedule {
    client: PteroClient;
    serverId: string;
    /** The ID of the schedule. */
    readonly id: number;
    /** The date the schedule was created. */
    readonly createdAt: Date;
    /** The name of the schedule. */
    name: string;
    /** The schedule cronjob data. */
    cron: Cron;
    /** Whether the schedule is active. */
    active: boolean;
    /** Whether the schedule is currently being processed. */
    processing: boolean;
    /** Whether the schedule should only run when the server is online. */
    onlyWhenOnline: boolean;
    /** The date the schedule was last updated. */
    updatedAt: Date | undefined;
    /** The date the schedule last ran. */
    lastRunAt: Date | undefined;
    /** The date the scheduls is supposed to run next. */
    nextRunAt: Date;
    /** A dict of tasks that will be executed when the schedule is running. */
    tasks: Dict<number, ScheduleTask>;
    constructor(client: PteroClient, serverId: string, data: any);
    _patch(data: any): void;
    _resolveTask(data: any): ScheduleTask;
    /** Executes the schedule immediately. */
    execute(): Promise<void>;
    /**
     * Updates the schedule with the specified options.
     * @param options Update schedule options.
     * @see {@link CreateScheduleOptions UpdateScheduleOptions}.
     * @returns The updated instance.
     */
    update(options: CreateScheduleOptions): Promise<this>;
    /**
     * Creates a task on the schedule.
     * @param action The action the task will perform.
     * @param payload The task payload.
     * @param offset The execution time offset.
     * @returns The new task.
     */
    createTask(action: ScheduleTaskAction, payload: string, offset: number, sequenceId?: number): Promise<ScheduleTask>;
    /**
     * Updates a specified task in the schedule.
     * @param id The ID of the task.
     * @param options Update task options.
     * @returns The updated task.
     */
    updateTask(id: number, options: {
        action: ScheduleTaskAction;
        payload: string;
        offset: number;
    }): Promise<ScheduleTask>;
    /**
     * Deletes a task from the schedule.
     * @param id The ID of the task.
     */
    deleteTask(id: number): Promise<void>;
    /**
     * Converts the schedule into a JSON object, relative to the API
     * response object.
     * @returns The JSON object.
     */
    toJSON(): object;
    /** @returns The string representation of the schedule. */
    toString(): string;
}
