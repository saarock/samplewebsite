import type { PteroClient } from '..';
import { Shard } from './Shard';
export declare class WebSocketManager {
    client: PteroClient;
    shards: Map<string, Shard>;
    active: boolean;
    useOrigin: boolean;
    constructor(client: PteroClient);
    /**
     * Creates a websocket shard instance for a specified server.
     * @param id The identifier of the server.
     * @returns The server websocket shard.
     */
    createShard(id: string): Shard;
    /**
     * Disconnects a server shard's websocket connection and removes it.
     * If some shards do not return a value, `undefined` will be set in place.
     * @param id The identifier of the server.
     * @returns Whether the websocket shard was disconnected and/or removed.
     */
    deleteShard(id: string): boolean;
    get ping(): number;
    /**
     * Broadcasts an event to all shards and waits for the responses.
     * @param event The event to broadcast.
     * @param args Arguments to send with the event.
     * @returns A list of the returned values, if any.
     * @example
     * ```
     * const values = await client.ws.broadcast('sendStats');
     * console.log(values.map(s => s.resources.uptime));
     * ```
     */
    broadcast<T>(event: string, args?: string): Promise<T[]>;
    /** Disconnects all active websocket shards and removes them. */
    destroy(): void;
}
