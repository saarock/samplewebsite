import type { PteroClient } from '../client';
import { BackupManager } from '../client/BackupManager';
import { ClientDatabaseManager } from '../client/ClientDatabaseManager';
import { FileManager } from '../client/FileManager';
import { NetworkManager } from '../client/NetworkManager';
import { SubUserManager } from '../client/SubUserManager';
import { FeatureLimits, Limits } from '../common';
import { ClientResources, EggVariable, StartupData } from '../common/client';
export declare class ClientServer {
    client: PteroClient;
    /** The UUID of the server. */
    readonly uuid: string;
    /** A substring of the server's UUID. */
    readonly identifier: string;
    /** The internal ID of the server. */
    readonly internalId: number;
    /** The name of the server. */
    name: string;
    /** The description of the server (if set). */
    description: string | undefined;
    /** Whether the client user is the server owner. */
    isOwner: boolean;
    /** The name of the node the server is on. */
    node: string;
    /** An object containing the SFTP details. */
    sftpDetails: {
        ip: string;
        port: number;
    };
    /** An object containing the server limits. */
    limits: Limits;
    /** An object containing the server feature limits. */
    featureLimits: FeatureLimits;
    /** A list of egg features the server uses. */
    eggFeatures: string[] | undefined;
    /** The invocation (or startup command) for the server. */
    invocation: string | null;
    /** The docker image the server uses. */
    dockerImage: string;
    /** The current status of the server. */
    status: string | undefined;
    /** Whether the server is suspended. */
    suspended: boolean;
    /** Whether the server is installing. */
    installing: boolean;
    /** Whether the server is transferring. */
    transferring: boolean;
    backups: BackupManager;
    databases: ClientDatabaseManager;
    files: FileManager;
    network: NetworkManager;
    users: SubUserManager;
    constructor(client: PteroClient, data: any);
    _patch(data: any): void;
    /**
     * Returns a formatted URL to the server.
     * @returns The formatted URL.
     */
    get panelURL(): string;
    /**
     * Fetches the server resources data.
     * @returns The server resources.
     */
    fetchResources(): Promise<ClientResources>;
    /**
     * Fetches the server startup and egg variables data.
     * @returns The startup and egg variable data.
     * @see {@link StartupData}.
     */
    fetchStartup(): Promise<StartupData>;
    /**
     * Sends a command to the server console.
     * @param command The command to send.
     */
    sendCommand(command: string): Promise<void>;
    /**
     * Sets the power state of the server.
     * @param state The power state.
     */
    setPowerState(state: 'start' | 'stop' | 'restart' | 'kill'): Promise<void>;
    /**
     * Updates the server's docker image.
     * @param image The docker image.
     */
    setDockerImage(image: string): Promise<void>;
    /**
     * Updates a specified environment variable on the server. The key must be
     * the environment variable name in capital letters, not the normal
     * variable name.
     * @param key The environment variable key.
     * @param value The value of the environment variable.
     * @returns The updated egg variable.
     */
    setVariable(key: string, value: string): Promise<EggVariable>;
    /**
     * Updates the server's name.
     * @param name The new server name.
     */
    rename(name: string): Promise<void>;
    /** Triggers the reinstall process for the server. */
    reinstall(): Promise<void>;
    /**
     * Converts the server into a JSON object, relative to the API
     * response object.
     * @returns The JSON object.
     */
    toJSON(): object;
    /** @returns The string representation of the server. */
    toString(): string;
}
