/// <reference types="node" />
import type { PteroClient } from '..';
import { EventEmitter } from 'events';
import { WebSocketEvents } from '../../common/client';
export declare class Shard extends EventEmitter {
    client: PteroClient;
    id: string;
    origin: boolean;
    private socket;
    private status;
    readyAt: number;
    ping: number;
    lastPing: number;
    constructor(client: PteroClient, id: string, origin: boolean);
    emit<E extends keyof WebSocketEvents>(event: E, ...args: WebSocketEvents[E]): boolean;
    on<E extends keyof WebSocketEvents>(event: E, listener: (...args: WebSocketEvents[E]) => void): this;
    once<E extends keyof WebSocketEvents>(event: E, listener: (...args: WebSocketEvents[E]) => void): this;
    off<E extends keyof WebSocketEvents>(event: E, listener: (...args: WebSocketEvents[E]) => void): this;
    private debug;
    /** Initializes the connection to the server websocket after authentication. */
    connect(): Promise<void>;
    private refresh;
    /**
     * Sends a websocket event to the server (with optional payload args).
     * @param event The event to send to the server.
     * @param args Additional arguements to pass with to the event.
     * @example
     * ```
     * const shard = client.addSocketServer('411d2eb9');
     * shard.on('authSuccess', () => shard.send('send logs'));
     * shard.connect();
     * ```
     */
    send(event: string, args?: string[]): void;
    /**
     * Sends an event to the server and waits for a response.
     * @param event The event to send.
     * @param [args] The arguments to send with the event.
     * @returns The event's response, if any.
     * @example
     * ```
     * const shard = client.addSocketServer('411d2eb9');
     * shard.on('authSuccess', () => {
     *  shard.request('sendCommand', '/say hello world').then(console.log)
     * );
     * shard.connect();
     * ```
     */
    request(event: string, args?: string): Promise<any>;
    /**
     * Sends an event to the server and waits for a response.
     * @param event The event to send.
     * @param command The command to send.
     * @returns The event's response, if any.
     * @example
     * ```
     * const shard = client.addSocketServer('411d2eb9');
     * shard.on('authSuccess', () => {
     *  shard.request('sendCommand', '/say hello world').then(console.log)
     * );
     * shard.connect();
     * ```
     */
    request(event: 'sendCommand', command: string): Promise<void>;
    /**
     * Sends an event to the server and waits for a response.
     * @param event The event to send.
     * @returns The event's response, if any.
     * @example
     * ```
     * const shard = client.addSocketServer('411d2eb9');
     * shard.on('authSuccess', () => {
     *  shard.request('sendLogs').then(console.log)
     * );
     * shard.connect();
     * ```
     */
    request(event: 'sendLogs'): Promise<void>;
    /**
     * Sends an event to the server and waits for a response.
     * @param event The event to send.
     * @returns The event's response, if any.
     * @example
     * ```
     * const shard = client.addSocketServer('411d2eb9');
     * shard.on('authSuccess', () => {
     *  shard.request('sendStats').then(console.log)
     * );
     * shard.connect();
     * ```
     */
    request(event: 'sendStats'): Promise<void>;
    /**
     * Sends an event to the server and waits for a response.
     * @param event The event to send.
     * @param state The power state to send.
     * @returns The event's response, if any.
     * @example
     * ```
     * const shard = client.addSocketServer('411d2eb9');
     * shard.on('authSuccess', () => {
     *  shard.request('setState', 'restart').then(console.log)
     * );
     * shard.connect();
     * ```
     */
    request(event: 'setState', state: string): Promise<void>;
    /** Disconnects the websocket from the API. */
    disconnect(): void;
    private onOpen;
    private onMessage;
    private onError;
    private onClose;
}
