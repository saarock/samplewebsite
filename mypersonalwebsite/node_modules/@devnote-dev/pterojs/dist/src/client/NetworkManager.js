"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NetworkManager = void 0;
const Dict_1 = require("../structures/Dict");
const caseConv_1 = require("../util/caseConv");
const endpoints_1 = require("./endpoints");
class NetworkManager {
    constructor(client, serverId) {
        this.client = client;
        this.cache = new Dict_1.Dict();
        this.serverId = serverId;
    }
    /**
     * Transforms the raw allocation object(s) into typed objects.
     * @param data The resolvable allocation object(s).
     * @returns The resolved allocation object(s).
     */
    _patch(data) {
        if (data.data) {
            const res = new Dict_1.Dict();
            for (let o of data.data) {
                const a = caseConv_1.default.toCamelCase(o.attributes);
                a.notes ||= null;
                res.set(a.id, a);
            }
            this.cache.update(res);
            return res;
        }
        const a = caseConv_1.default.toCamelCase(data);
        a.notes ||= null;
        this.cache.set(a.id, a);
        return a;
    }
    /**
     * Fetches the network allocations on the server.
     * @returns The fetched network allocations.
     * @example
     * ```
     * const server = await client.servers.fetch('1c639a86');
     * await server.network.fetch()
     *  .then(console.log)
     *  .catch(console.error);
     * ```
     */
    async fetch() {
        const data = await this.client.requests.get(endpoints_1.default.servers.network.main(this.serverId));
        return this._patch(data);
    }
    /**
     * Sets the notes of a specified network allocation.
     * @param id The ID of the network allocation.
     * @param notes The notes to set.
     * @returns The updated network allocation.
     * @example
     * ```
     * const server = await client.servers.fetch('1c639a86');
     * await server.network.setNote(14, 'bungee')
     *  .then(console.log)
     *  .catch(console.error);
     * ```
     */
    async setNote(id, notes) {
        const data = await this.client.requests.post(endpoints_1.default.servers.network.get(this.serverId, id), { notes });
        return this._patch(data);
    }
    /**
     * Sets the primary allocation of the server.
     * @param id The ID of the network allocation.
     * @returns The updated network allocation.
     * @example
     * ```
     * const server = await client.servers.fetch('1c639a86');
     * await server.network.setPrimary(14)
     *  .then(console.log)
     *  .catch(console.error);
     * ```
     */
    async setPrimary(id) {
        const data = await this.client.requests.post(endpoints_1.default.servers.network.primary(this.serverId, id));
        return this._patch(data);
    }
    /**
     * Unassigns the specified network allocation form the server.
     * @param id The ID of the network allocation.
     * @example
     * ```
     * const server = await client.servers.fetch('1c639a86');
     * await server.network.unassign(12).catch(console.error);
     * ```
     */
    async unassign(id) {
        await this.client.requests.delete(endpoints_1.default.servers.network.get(this.serverId, id));
    }
}
exports.NetworkManager = NetworkManager;
