"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebSocketManager = void 0;
const Shard_1 = require("./Shard");
class WebSocketManager {
    constructor(client) {
        this.client = client;
        this.shards = new Map();
        this.active = false;
        this.useOrigin = false;
    }
    /**
     * Creates a websocket shard instance for a specified server.
     * @param id The identifier of the server.
     * @returns The server websocket shard.
     */
    createShard(id) {
        if (this.shards.has(id))
            return this.shards.get(id);
        const shard = new Shard_1.Shard(this.client, id, this.useOrigin);
        this.shards.set(id, shard);
        this.active = true;
        return shard;
    }
    /**
     * Disconnects a server shard's websocket connection and removes it.
     * If some shards do not return a value, `undefined` will be set in place.
     * @param id The identifier of the server.
     * @returns Whether the websocket shard was disconnected and/or removed.
     */
    deleteShard(id) {
        if (!this.shards.has(id))
            return false;
        this.shards.get(id).disconnect();
        this.active = !!this.shards.size;
        return this.shards.delete(id);
    }
    get ping() {
        if (!this.shards.size)
            return -1;
        let sum = 0;
        for (let s of this.shards.values())
            sum += s.ping;
        return sum / this.shards.size;
    }
    /**
     * Broadcasts an event to all shards and waits for the responses.
     * @param event The event to broadcast.
     * @param args Arguments to send with the event.
     * @returns A list of the returned values, if any.
     * @example
     * ```
     * const values = await client.ws.broadcast('sendStats');
     * console.log(values.map(s => s.resources.uptime));
     * ```
     */
    async broadcast(event, args) {
        const res = [];
        for (const shard of this.shards.values()) {
            let data = await shard.request(event, args);
            res.push(data);
        }
        return res;
    }
    /** Disconnects all active websocket shards and removes them. */
    destroy() {
        for (let s of this.shards.values())
            s.disconnect();
        this.shards.clear();
        this.active = false;
    }
}
exports.WebSocketManager = WebSocketManager;
