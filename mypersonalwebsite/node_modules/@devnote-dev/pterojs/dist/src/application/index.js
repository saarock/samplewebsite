"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PteroApp = void 0;
const ApplicationServerManager_1 = require("./ApplicationServerManager");
const NestManager_1 = require("./NestManager");
const NodeAllocationManager_1 = require("./NodeAllocationManager");
const NodeLocationManager_1 = require("./NodeLocationManager");
const NodeManager_1 = require("./NodeManager");
const RequestManager_1 = require("../http/RequestManager");
const UserManager_1 = require("./UserManager");
const Errors_1 = require("../structures/Errors");
const config_1 = require("../util/config");
/**
 * The base class for the Pterodactyl application API.
 * This operates using a Pterodactyl API key which can be found at <your.domain.name/admin/api>
 * or <your.domain.name/account/api> if you are using a client API key.
 *
 * **Warning:** Keep your API key private at all times. Exposing this can lead
 * to your servers, nodes, configurations and more being corrupted and/or deleted.
 */
class PteroApp {
    constructor(domain, auth, options = {}) {
        if (!/https?\:\/\/(?:localhost\:\d{4}|[\w\.\-]{3,256})/gi.test(domain))
            throw new Errors_1.ValidationError("Domain URL must start with 'http://' or 'https://' and " +
                'must be bound to a port if using localhost.');
        if (domain.endsWith("/"))
            domain = domain.slice(0, -1);
        this.domain = domain;
        this.auth = auth;
        this.options = config_1.default.appConfig({ application: options });
        this.allocations = new NodeAllocationManager_1.NodeAllocationManager(this);
        this.locations = new NodeLocationManager_1.NodeLocationManager(this);
        this.nests = new NestManager_1.NestManager(this);
        this.nodes = new NodeManager_1.NodeManager(this);
        this.servers = new ApplicationServerManager_1.ApplicationServerManager(this);
        this.users = new UserManager_1.UserManager(this);
        this.requests = new RequestManager_1.RequestManager('Application', domain, auth);
    }
    get ping() {
        return this.requests._ping;
    }
}
exports.PteroApp = PteroApp;
