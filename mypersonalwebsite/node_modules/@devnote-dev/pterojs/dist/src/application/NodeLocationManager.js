"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NodeLocationManager = void 0;
const BaseManager_1 = require("../structures/BaseManager");
const Dict_1 = require("../structures/Dict");
const Errors_1 = require("../structures/Errors");
const caseConv_1 = require("../util/caseConv");
const endpoints_1 = require("./endpoints");
class NodeLocationManager extends BaseManager_1.BaseManager {
    constructor(client) {
        super();
        this.client = client;
        this.cache = new Dict_1.Dict();
        this.meta = {
            current: 0,
            total: 0,
            count: 0,
            perPage: 0,
            totalPages: 0
        };
    }
    /**
     * Allowed filter arguments for locations:
     * * short
     * * long
     */
    get FILTERS() {
        return Object.freeze(['short', 'long']);
    }
    /**
     * Allowed include arguments for locations:
     * * nodes
     * * servers
     */
    get INCLUDES() {
        return Object.freeze(['nodes', 'servers']);
    }
    /** Allowed sort arguments for locations (none). */
    get SORTS() { return Object.freeze([]); }
    /**
     * Transforms the raw location object(s) into typed objects.
     * @param data The resolvable location object(s).
     * @returns The resolved location object(s).
     */
    _patch(data) {
        if (data?.meta?.pagination) {
            this.meta = caseConv_1.default.toCamelCase(data.meta.pagination, { ignore: ['current_page'] });
            this.meta.current = data.meta.pagination.current_page;
        }
        if (data?.data) {
            const res = new Dict_1.Dict();
            for (let o of data.data) {
                const n = caseConv_1.default.toCamelCase(o.attributes);
                n.createdAt = new Date(n.createdAt);
                n.updatedAt &&= new Date(n.updatedAt);
                res.set(n.id, n);
            }
            if (this.client.options.locations.cache)
                this.cache.update(res);
            return res;
        }
        const loc = caseConv_1.default.toCamelCase(data.attributes);
        loc.createdAt = new Date(loc.createdAt);
        loc.updatedAt &&= new Date(loc.updatedAt);
        if (this.client.options.locations.cache)
            this.cache.set(data.id, loc);
        return loc;
    }
    /**
     * Resolves a location from an object. This can be:
     * * a string
     * * a number
     * * an object
     *
     * @param obj The object to resolve from.
     * @returns The resolved location or undefined if not found.
     */
    resolve(obj) {
        if (typeof obj === 'number')
            return this.cache.get(obj);
        if (typeof obj === 'string')
            return this.cache.find(o => (o.short === obj) || (o.long === obj));
        if (obj.relationships?.location?.attributes)
            return this._patch(obj.relationships.location);
        return undefined;
    }
    /**
     * @param id The ID of the location.
     * @returns The formatted URL to the location in the admin panel.
     */
    adminURLFor(id) {
        return `${this.client.domain}/admin/locations/view/${id}`;
    }
    async fetch(op, ops = {}) {
        let path = endpoints_1.default.locations.main;
        if (typeof op === 'number') {
            if (!ops.force && this.cache.has(op))
                return this.cache.get(op);
            path = endpoints_1.default.locations.get(op);
        }
        else {
            if (op)
                ops = op;
        }
        const data = await this.client.requests.get(path, ops, null, this);
        return this._patch(data);
    }
    /**
     * Queries the API for locations that match the specified query filters. This fetches from the
     * API directly and does not check the cache. Use cache methods for filtering and sorting.
     *
     * Available query filters:
     * * short
     * * long
     *
     * @param entity The entity to query.
     * @param options The query options to filter by.
     * @returns The queried locations.
     * @example
     * ```
     * app.locations.query('us', { filter: 'long' })
     *  .then(console.log)
     *  .catch(console.error);
     * ```
     */
    async query(entity, options // might remove sort in future
    ) {
        if (!options.sort && !options.filter)
            throw new Errors_1.ValidationError('Sort or filter is required.');
        const payload = {};
        if (options.filter)
            payload.filter = [options.filter, entity];
        if (options.sort)
            payload.sort = options.sort;
        const data = await this.client.requests.get(endpoints_1.default.locations.main, payload, null, this);
        return this._patch(data);
    }
    /**
     * Creates a location.
     * @param short The short name for the location (usually the country code).
     * @param long The long name for the location.
     * @returns The new location.
     * @example
     * ```
     * app.locations.create('ca', 'canada')
     *  .then(console.log)
     *  .catch(console.error);
     * ```
     */
    async create(short, long) {
        const data = await this.client.requests.post(endpoints_1.default.locations.main, { short, long });
        return this._patch(data);
    }
    /**
     * Updates a location.
     * @param id The ID of the location.
     * @param options The updated short and/or long name of the location.
     * @returns The updated location.
     * @example
     * ```
     * app.locations.update(10, { long: 'united kingdom' })
     *  .then(console.log)
     *  .catch(console.error);
     * ```
     */
    async update(id, options) {
        if (!options.short && !options.long)
            throw new Errors_1.ValidationError('Either short or long is required to update the location');
        const data = await this.client.requests.patch(endpoints_1.default.locations.get(id), options);
        return this._patch(data);
    }
    /**
     * Deletes a location.
     * @param id The ID of the location.
     * @example
     * ```
     * app.locations.delete(9).catch(console.error);
     * ```
     */
    async delete(id) {
        await this.client.requests.delete(endpoints_1.default.locations.get(id));
        this.cache.delete(id);
    }
}
exports.NodeLocationManager = NodeLocationManager;
