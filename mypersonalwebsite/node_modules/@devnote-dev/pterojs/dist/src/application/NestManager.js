"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NestManager = void 0;
const BaseManager_1 = require("../structures/BaseManager");
const Dict_1 = require("../structures/Dict");
const NestEggsManager_1 = require("./NestEggsManager");
const caseConv_1 = require("../util/caseConv");
const endpoints_1 = require("./endpoints");
class NestManager extends BaseManager_1.BaseManager {
    constructor(client) {
        super();
        this.client = client;
        this.cache = new Dict_1.Dict();
        this.eggs = new NestEggsManager_1.NestEggsManager(client);
        this.meta = {
            current: 0,
            total: 0,
            count: 0,
            perPage: 0,
            totalPages: 0
        };
    }
    /** Allowed filter arguments for nests (none). */
    get FILTERS() { return Object.freeze([]); }
    /**
     * Allowed include arguments for nests:
     * * eggs
     * * servers
     */
    get INCLUDES() {
        return Object.freeze(['eggs', 'servers']);
    }
    /** Allowed sort arguments for nests (none). */
    get SORTS() { return Object.freeze([]); }
    /**
     * Transforms the raw nest object(s) into typed objects.
     * @param data The resolvable nest object(s).
     * @returns The resolved nest object(s).
     */
    _patch(data) {
        if (data?.meta?.pagination) {
            this.meta = caseConv_1.default.toCamelCase(data.meta.pagination, { ignore: ['current_page'] });
            this.meta.current = data.meta.pagination.current_page;
        }
        if (data?.data) {
            const res = new Dict_1.Dict();
            for (let o of data.data) {
                const n = caseConv_1.default.toCamelCase(o.attributes);
                n.createdAt = new Date(n.createdAt);
                n.updatedAt &&= new Date(n.updatedAt);
                res.set(n.id, n);
            }
            if (this.client.options.nests.cache)
                this.cache.update(res);
            return res;
        }
        const n = caseConv_1.default.toCamelCase(data.attributes);
        n.createdAt = new Date(n.createdAt);
        n.updatedAt &&= new Date(n.updatedAt);
        if (this.client.options.nodes.cache)
            this.cache.set(n.id, n);
        return n;
    }
    /**
     * @param id The ID of the nest.
     * @returns The formatted URL to the nest in the admin panel.
     */
    adminURLFor(id) {
        return `${this.client.domain}/admin/nests/view/${id}`;
    }
    async fetch(op, include = []) {
        let path = endpoints_1.default.nests.main;
        if (typeof op === 'number') {
            path = endpoints_1.default.nests.get(op);
        }
        else {
            include.push(...op || []);
        }
        const data = await this.client.requests.get(path, { include }, null, this);
        return this._patch(data);
    }
}
exports.NestManager = NestManager;
