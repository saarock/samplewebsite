"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApplicationDatabaseManager = void 0;
const BaseManager_1 = require("../structures/BaseManager");
const Dict_1 = require("../structures/Dict");
const caseConv_1 = require("../util/caseConv");
const endpoints_1 = require("./endpoints");
const Errors_1 = require("../structures/Errors");
class ApplicationDatabaseManager extends BaseManager_1.BaseManager {
    constructor(client, serverId) {
        super();
        this.client = client;
        this.cache = new Dict_1.Dict();
        this.serverId = serverId;
    }
    /** Allowed filter arguments for server databases. */
    get FILTERS() {
        return Object.freeze([]);
    }
    /** Allowed include arguments for server databases. */
    get INCLUDES() {
        return Object.freeze(['host', 'password']);
    }
    /** Allowed sort arguments for server databases. */
    get SORTS() {
        return Object.freeze([]);
    }
    _patch(data) {
        if (data.data) {
            const res = new Dict_1.Dict();
            for (let o of data.data) {
                const d = caseConv_1.default.toCamelCase(o.attributes);
            }
            this.cache.update(res);
            return res;
        }
        const d = caseConv_1.default.toCamelCase(data.attributes);
        this.cache.set(d.id, d);
        return d;
    }
    async fetch(op, ops = {}) {
        let path;
        switch (typeof op) {
            case 'number': {
                if (!ops.force && this.cache.has(op))
                    return this.cache.get(op);
                path = endpoints_1.default.servers.databases.get(this.serverId, op);
                break;
            }
            case 'undefined':
            case 'object': {
                path = endpoints_1.default.servers.databases.main(this.serverId);
                if (op)
                    ops = op;
                break;
            }
            default:
                throw new Errors_1.ValidationError(`expected database id or fetch options; got ${typeof op}`);
        }
        const data = await this.client.requests.get(path, ops, null, this);
        return this._patch(data);
    }
    async create(database, remote, host) {
        if (!/^[0-9%.]{1,15}$/.test(remote))
            throw new Errors_1.ValidationError('remote did not pass the required validation: /^[0-9%.]{1,15}$/');
        const data = await this.client.requests.post(endpoints_1.default.servers.databases.main(this.serverId), { database, remote, host });
        return this._patch(data);
    }
    async resetPasword(id) {
        await this.client.requests.post(endpoints_1.default.servers.databases.reset(this.serverId, id));
    }
    async delete(id) {
        await this.client.requests.delete(endpoints_1.default.servers.databases.get(this.serverId, id));
        this.cache.delete(id);
    }
}
exports.ApplicationDatabaseManager = ApplicationDatabaseManager;
